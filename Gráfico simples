{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyN8URelcET+xTON0tGsXVrP",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/wagner719/data_science/blob/master/Gr%C3%A1fico%20simples\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eoRLhmEFJjaZ"
      },
      "source": [
        "import pandas as pd\r\n",
        "\r\n",
        "df = pd.read_csv('countries.csv')\r\n",
        "#df.head()\r\n",
        "#df.tail()\r\n",
        "#df.info()\r\n",
        "#df.country\r\n",
        "#type(df.country)\r\n",
        "#df.country.unique()\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W1yRyhaYMRNU"
      },
      "source": [
        "Filtrar os países e criar um gráfico com plot"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        },
        "id": "UzJNJvEnMVSM",
        "outputId": "062fedbe-9768-47c6-c59a-72d57678fb7c"
      },
      "source": [
        "df[df.country == \"Brazil\"].plot(x='year', y='population')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8feb7103d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W8x_q3hhNbU5"
      },
      "source": [
        "criar o mesmo gráfico usando matplot"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DdhX0Rr4Ne2S",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        },
        "outputId": "09ab096f-6515-4960-ff2e-1f2ea458a5f9"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "\r\n",
        "plt.plot(df[df.country == 'Brazil'].year, df[df.country == 'Brazil'].population)\r\n",
        "plt.legend(['population'])\r\n",
        "plt.xlabel('year')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'year')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAERCAYAAABrWly6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3dd3hUVf7H8feXltARQg8xgHSSUEJRZMGuiKIiKnZxZV3dZe3iT13bujbEigU7FhTFVWwoIAgWVFpCqAkhQAAJJPQQUub8/pjBzSKQAJPcyeTzep48mbn3zMz3ZJIPlzP3nGvOOUREpOKr4nUBIiISHAp0EZEwoUAXEQkTCnQRkTChQBcRCRMKdBGRMOFpoJvZ62aWZWYppWgbY2YzzWyhmSWb2aDyqFFEpKLw+gj9TeDMUra9B5jknOsOXAK8UFZFiYhURJ4GunNuNpBTfJuZtTWzqWY238zmmFnHfc2BeoHb9YEN5ViqiEjIq+Z1AQcwHrjeOZdqZn3wH4mfDNwPfGNmfwdqA6d6V6KISOgJqUA3szrACcCHZrZvc0Tg+3DgTefck2Z2PPC2mXV1zvk8KFVEJOSEVKDjHwLa5pzrdoB91xIYb3fO/WRmkUAUkFWO9YmIhCyvPxT9H865HcBqMxsGYH4Jgd1rgVMC2zsBkcBmTwoVEQlB5uVqi2Y2ERiI/0h7E3Af8C3wItAcqA6875x70Mw6A68AdfB/QHqHc+4bL+oWEQlFnga6iIgET0gNuYiIyJHz7EPRqKgoFxsb69XLi4hUSPPnz9/inGt8oH2eBXpsbCzz5s3z6uVFRCokM1tzsH0achERCRMKdBGRMKFAFxEJEyE1U7SgoIDMzEzy8vK8LiUsRUZGEh0dTfXq1b0uRUTKQEgFemZmJnXr1iU2NpZia7lIEDjnyM7OJjMzk9atW3tdjoiUgZAacsnLy6NRo0YK8zJgZjRq1Ej/+xEJYyEV6IDCvAzpZysS3kIu0EVEwlVeQREvfbeK+WtySm58BBTo5SwjI4OuXbuW2Oa99977/f68efMYNWpUWZcmImWkyOeYNG8dJ42ZxaNfLWf6srJZ9TukPhQVv32BfumllwKQmJhIYmKix1WJyOFyzvHt8iwem7qclZt2kdCqAWMv6sbxbRuVyevpCH0/GRkZdOzYkcsuu4xOnTpx4YUXkpuby4wZM+jevTtxcXGMGDGCvXv3Av4lDO644w7i4uLo3bs3aWlpAFx99dV89NFHvz9vnTp1Dvha/fv3p0ePHvTo0YMff/wRgNGjRzNnzhy6devGU089xaxZsxg8eDAAOTk5nHfeecTHx9O3b1+Sk5MBuP/++xkxYgQDBw6kTZs2PPvss2X6cxKRQ1uwdisXvzyXa9+aR0GR44XLevDJDSeUWZhDCB+hP/DZEpZu2BHU5+zcoh73ndOlxHYrVqzgtddeo1+/fowYMYKxY8fy8ssvM2PGDNq3b8+VV17Jiy++yE033QRA/fr1Wbx4MRMmTOCmm27i888/L1U9TZo0Ydq0aURGRpKamsrw4cOZN28ejz76KGPGjPn9eWbNmvX7Y+677z66d+/OJ598wrfffsuVV17JokWLAFi+fDkzZ85k586ddOjQgb/+9a8651yknK3avIsnpq5g6pLfiKoTwUPndeWSXq2oXrXsj591hH4ArVq1ol+/fgBcfvnlzJgxg9atW9O+fXsArrrqKmbPnv17++HDh//+/aeffir16xQUFHDdddcRFxfHsGHDWLp0aYmP+f7777niiisAOPnkk8nOzmbHDv8/fGeffTYRERFERUXRpEkTNm3aVOpaROToZO3I4//+s5jTn5rNnNTN3HJae767fSBX9D22XMIcQvgIvTRH0mVl/9P7GjRoQHZ2dqna77tdrVo1fD7/9at9Ph/5+fl/eNxTTz1F06ZNSUpKwufzERkZeVR1R0RE/H67atWqFBYWHtXziUjJduYVMH52Oq/OWU1BkY8r+h7L304+jqg6ESU/OMh0hH4Aa9eu/f1I+7333iMxMZGMjIzfx8fffvttBgwY8Hv7Dz744Pfvxx9/POAfW58/fz4AU6ZMoaCg4A+vs337dpo3b06VKlV4++23KSoqAqBu3brs3LnzgLX179+fd999F/APxURFRVGvXr1gdFtEDsPewiLe+GE1A56YxXPfpnFq56bMuHUA95/bxZMwhxA+QvdShw4dGDduHCNGjKBz5848++yz9O3bl2HDhlFYWEivXr24/vrrf2+/detW4uPjiYiIYOLEiQBcd911DBkyhISEBM4880xq1679h9e54YYbGDp0KBMmTPifNvHx8VStWpWEhASuvvpqunfv/vtj9n34GR8fT61atXjrrbfK+KchIsX5fI7P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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vgrbEK2zQuBW"
      },
      "source": [
        "Gráfico do USA e BR juntos usando matplot"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "liDSBgZnPO9u",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "cfc47eca-1199-4a70-fa72-689e9f45feb0"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "\r\n",
        "\r\n",
        "brazil = df[df.country == 'Brazil'].copy()\r\n",
        "usa = df[df.country == 'United States'].copy()\r\n",
        "\r\n",
        "plt.plot(brazil.year, brazil.population)\r\n",
        "plt.plot(usa.year, usa.population)\r\n",
        "plt.legend(['BR', 'USA'])\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f8fe9ca8cd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ssjaQ0Y8Q6D1"
      },
      "source": [
        "agrupando as informações em relação a proporção"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "IxrabkIHQ92k",
        "outputId": "3f6cb584-25c7-426c-f4e4-2c12c7bd81c3"
      },
      "source": [
        "brazil['population.rel'] = brazil.population / brazil.iloc[0, 2]\r\n",
        "usa['population.rel'] = usa.population / usa.iloc[0, 2]\r\n",
        "brazil\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>year</th>\n",
              "      <th>population</th>\n",
              "      <th>population.rel</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>168</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1952</td>\n",
              "      <td>56602560</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>169</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1957</td>\n",
              "      <td>65551171</td>\n",
              "      <td>1.158096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1962</td>\n",
              "      <td>76039390</td>\n",
              "      <td>1.343391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1967</td>\n",
              "      <td>88049823</td>\n",
              "      <td>1.555580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>172</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1972</td>\n",
              "      <td>100840058</td>\n",
              "      <td>1.781546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>173</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1977</td>\n",
              "      <td>114313951</td>\n",
              "      <td>2.019590</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>174</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1982</td>\n",
              "      <td>128962939</td>\n",
              "      <td>2.278394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1987</td>\n",
              "      <td>142938076</td>\n",
              "      <td>2.525293</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1992</td>\n",
              "      <td>155975974</td>\n",
              "      <td>2.755635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1997</td>\n",
              "      <td>168546719</td>\n",
              "      <td>2.977723</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>2002</td>\n",
              "      <td>179914212</td>\n",
              "      <td>3.178553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>2007</td>\n",
              "      <td>190010647</td>\n",
              "      <td>3.356927</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    country  year  population  population.rel\n",
              "168  Brazil  1952    56602560        1.000000\n",
              "169  Brazil  1957    65551171        1.158096\n",
              "170  Brazil  1962    76039390        1.343391\n",
              "171  Brazil  1967    88049823        1.555580\n",
              "172  Brazil  1972   100840058        1.781546\n",
              "173  Brazil  1977   114313951        2.019590\n",
              "174  Brazil  1982   128962939        2.278394\n",
              "175  Brazil  1987   142938076        2.525293\n",
              "176  Brazil  1992   155975974        2.755635\n",
              "177  Brazil  1997   168546719        2.977723\n",
              "178  Brazil  2002   179914212        3.178553\n",
              "179  Brazil  2007   190010647        3.356927"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "tSxgQXzOTLL9",
        "outputId": "e501be1a-516c-45d2-cc8b-1e0f339f84c1"
      },
      "source": [
        "plt.plot(brazil.year, brazil.population.rel)\r\n",
        "plt.plot(usa.year, usa.population_rel)\r\n",
        "plt.legend(['BR', 'USA'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-67-cfb98d0317aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbrazil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myear\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbrazil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopulation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0musa\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myear\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0musa\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopulation_rel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'BR'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'USA'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5139\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5140\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5141\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5143\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'Series' object has no attribute 'rel'"
          ]
        }
      ]
    }
  ]
}